# our CI/CD workflow .yaml file

name: CI/CD workflow

on:
  workflow_dispatch:
    inputs:
      steps:
        description: 'Select steps to run'
        required: true
        default: 'all'
        type: choice
        options:
          - integration
          - all

jobs:
    integration:
      name: checks_and_tests
      if: ${{ inputs.steps == 'integration' || inputs.steps == 'all' }}
      runs-on: ubuntu-latest
      steps:
         - name: Checkout code repo
           # this action clones current repository to the VM where our job is running
           # https://github.com/actions/checkout
           uses: actions/checkout@v4
           
         - name: Setup uv
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install dependencies
           run: uv sync --group integration
           
         - name: Run ruff check
           run: uv run ruff check
           
         - name: Run pip-audit
           run: uv run pip-audit --vulnerability-service pypi

         - name: Run PyTest
           run: uv run pytest tests

    deployment:
        name: deploy
        if: ${{ inputs.steps == 'all' }}
        needs: integration
        runs-on: ubuntu-latest
        steps:
           - name: Checkout code repo
             # this action clones current repository to the VM where our job is running
             uses: actions/checkout@v4
  
           - name: Setup uv
             run: curl -LsSf https://astral.sh/uv/install.sh | sh
  
           - name: Install dependencies
             run: uv sync --group deployment
  
           - name: Download model
             run: uv run main.py --script download
  
           - name: Export model to ONNX format
             run: uv run main.py --script export

           - name: Build Docker image
             run: docker build -t polish-sentiment-app-onnx:latest . 

           - name: Set up AWS credentials
             uses: aws-actions/configure-aws-credentials@v1
             with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
              aws-region: us-east-1

           - name: Login to ECR
             id: login-ecr
             uses: aws-actions/amazon-ecr-login@v2
             with:
              mask-password: 'true' 

           - name: Push Docker image to ECR
             env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: sentiment-app-polish
              IMAGE_TAG: ${{ github.sha}}
             run: |
              docker tag polish-sentiment-app-onnx:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
              docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
              echo "Image pushed to ECR: $REGISTRY/$REPOSITORY:$IMAGE_TAG"